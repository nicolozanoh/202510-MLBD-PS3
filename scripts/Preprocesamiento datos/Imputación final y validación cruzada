Packages <- c("tidyverse", 
              "ggplot2", 
              "pacman", 
              "dplyr",
              "haven",
              "boot",
              "broom",
              "lmtest", 
              "fixest", 
              "gridExtra", 
              "writexl", 
              "readxl",
              "stargazer",
              "sf",
              "tmaptools",
              "osmdata",
              "FNN",
              "visdat",
              "leaflet",
              "stringi", # Manipular cadenas de texto
              "rio", # Importar datos fácilmente
              "sf", # Leer/escribir/manipular datos espaciales
              "tidymodels", # entrenamiento de modelos
              "blockCV", # validacion cruzada espacial
              "spatialsample") # Muestreo espacial para modelos de aprendizaje automático)

invisible(lapply(Packages, function(pkg) {
  if (!requireNamespace(pkg, quietly = TRUE)){ 
    install.packages(pkg)}
  library(pkg, character.only = TRUE)}))


# llamamos nuestras bases de datos:
setwd("C:\\Users\\samue\\OneDrive\\Escritorio\\Economia\\Big Data y Machine Learning\\Taller 3\\")

localidades_urbanas <- st_read(dsn = "Bases de datos propias\\localidades urbanas", layer = "localidades_urbanas")
names(localidades_urbanas) 
class(localidades_urbanas)    # sf + data.frame 
head(localidades_urbanas)     # primeras filas (tabla de atributos)
str(localidades_urbanas)      # estructura (geometría + atributos)

Train_localizado<- st_read(dsn = "Bases de datos propias\\Train", layer = "Train_localizado")
names(Train_localizado)  
class(Train_localizado)    # sf + data.frame 
head(Train_localizado)     # primeras filas (tabla de atributos)
str(Train_localizado)      # estructura (geometría + atributos)

Test_localizado<- st_read(dsn = "Bases de datos propias\\Test", layer = "Test_localizado")
names(Test_localizado)  
class(Test_localizado)    # sf + data.frame 
head(Test_localizado)     # primeras filas (tabla de atributos)
str(Test_localizado)      # estructura (geometría + atributos)



# Hacemos particion de chapinero 
Train_localizado <- Train_localizado %>% subset( loc_nmb != 'CHAPINERO' | is.na(loc_nmb)==TRUE )

# Imputamos bth_prb valores inf por el minimo de bth_prb
# Encontrar el mínimo valor finito en bth_prb
min_finite <- min(Train_localizado$bth_prb[is.finite(Train_localizado$bth_prb)], na.rm = TRUE)

# Reemplazar valores Inf con el mínimo finito
Train_localizado <- Train_localizado %>%
  mutate(bth_prb = ifelse(is.infinite(bth_prb), min_finite, bth_prb))



########## Imputacion de variables clave #################################################

# Función para calcular la moda
moda <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}
########## Imputacion estrato #################################################
# Separar los puntos con y sin estrato
con_estrato <- Train_localizado %>% filter(!is.na(estrato))
sin_estrato <- Train_localizado %>% filter(is.na(estrato))

con_estrato_TEST <- Test_localizado %>% filter(!is.na(estrato))
sin_estrato_TEST <- Test_localizado %>% filter(is.na(estrato))
# Extraer coordenadas en formato matriz para kNN
coords_con <- st_coordinates(st_centroid(con_estrato))
coords_sin <- st_coordinates(st_centroid(sin_estrato))

coords_con_TEST <- st_coordinates(st_centroid(con_estrato_TEST))
coords_sin_TEST <- st_coordinates(st_centroid(sin_estrato_TEST))

# Buscar los k vecinos más cercanos (aquí usamos k = 5)
knn_result_TRAIN <- get.knnx(coords_con, coords_sin, k = 5)
knn_result_TEST <- get.knnx(coords_con_TEST, coords_sin_TEST, k = 5)

# Imputar estrato usando moda de los vecinos
estrato_imputado_TRAIN <- apply(knn_result_TRAIN$nn.index, 1, function(indices) {
  vecinos <- con_estrato$estrato[indices]
  moda(vecinos)
})

estrato_imputado_TEST <- apply(knn_result_TEST$nn.index, 1, function(indices) {
  vecinos <- con_estrato_TEST$estrato[indices]
  moda(vecinos)
})
# Asignar los estratos imputados
sin_estrato$estrato <- estrato_imputado_TRAIN
sin_estrato_TEST$estrato <- estrato_imputado_TEST
# Combinar todo
Train_localizado <- bind_rows(con_estrato, sin_estrato)
Test_localizado <- bind_rows(con_estrato_TEST, sin_estrato_TEST)
########## Imputacion Numero de parqueaderos #################################################
# Separar los puntos con y sin estrato
con_nm_prqd  <- Train_localizado %>% filter(!is.na(nm_prqd ))
sin_nm_prqd  <- Train_localizado %>% filter(is.na(nm_prqd ))

con_nm_prqd_TEST  <- Test_localizado %>% filter(!is.na(nm_prqd ))
sin_nm_prqd_TEST  <- Test_localizado %>% filter(is.na(nm_prqd ))
# Extraer coordenadas en formato matriz para kNN
coords_con_nm_prqd <- st_coordinates(st_centroid(con_nm_prqd))
coords_sin_nm_prqd <- st_coordinates(st_centroid(sin_nm_prqd))

coords_con_nm_prqd_TEST <- st_coordinates(st_centroid(con_nm_prqd_TEST))
coords_sin_nm_prqd_TEST <- st_coordinates(st_centroid(sin_nm_prqd_TEST))
# Buscar los k vecinos más cercanos (aquí usamos k = 5)
knn_result <- get.knnx(coords_con_nm_prqd, coords_sin_nm_prqd, k = 5)
knn_result_Test <- get.knnx(coords_con_nm_prqd_TEST, coords_sin_nm_prqd_TEST, k = 5)

# Imputar estrato usando moda de los vecinos
nm_prqd_imputado <- apply(knn_result$nn.index, 1, function(indices) {
  vecinos <- con_nm_prqd$nm_prqd [indices]
  moda(vecinos)
})

nm_prqd_imputado_Test <- apply(knn_result_Test$nn.index, 1, function(indices) {
  vecinos <- con_nm_prqd_TEST$nm_prqd [indices]
  moda(vecinos)
})
# Asignar los nm_prqd imputados
sin_nm_prqd$nm_prqd  <- nm_prqd_imputado
sin_nm_prqd_TEST$nm_prqd  <- nm_prqd_imputado_Test
# Combinar todo
Train_localizado <- bind_rows(con_nm_prqd, sin_nm_prqd)
Test_localizado <- bind_rows(con_nm_prqd_TEST, sin_nm_prqd_TEST)

########## Imputacion Numero de codigo de manzana #################################################
# Separar los puntos con y sin estrato
con_cod_man    <- Train_localizado %>% filter(!is.na(cod_man))
sin_cod_man    <- Train_localizado %>% filter(is.na(cod_man))

con_cod_man_TEST  <- Test_localizado %>% filter(!is.na(cod_man))
sin_cod_man_TEST  <- Test_localizado %>% filter(is.na(cod_man ))
# Extraer coordenadas en formato matriz para kNN
coords_con_cod_man <- st_coordinates(st_centroid(con_cod_man))
coords_sin_cod_man <- st_coordinates(st_centroid(sin_cod_man))

coords_con_cod_man_TEST <- st_coordinates(st_centroid(con_cod_man_TEST))
coords_sin_cod_man_TEST <- st_coordinates(st_centroid(sin_cod_man_TEST))
# Buscar los k vecinos más cercanos (aquí usamos k = 5)
knn_result <- get.knnx(coords_con_cod_man, coords_sin_cod_man, k = 5)
knn_result_Test <- get.knnx(coords_con_cod_man_TEST, coords_sin_cod_man_TEST, k = 5)

# Imputar estrato usando moda de los vecinos
cod_man_imputado <- apply(knn_result$nn.index, 1, function(indices) {
  vecinos <- con_cod_man$cod_man [indices]
  moda(vecinos)
})

cod_man_imputado_Test <- apply(knn_result_Test$nn.index, 1, function(indices) {
  vecinos <- con_cod_man_TEST$cod_man [indices]
  moda(vecinos)
})
# Asignar los nm_prqd imputados
sin_cod_man$cod_man  <- cod_man_imputado
sin_cod_man_TEST$cod_man  <- cod_man_imputado_Test
# Combinar todo
Train_localizado <- bind_rows(con_cod_man, sin_cod_man)
Test_localizado <- bind_rows(con_cod_man_TEST, sin_cod_man_TEST)
